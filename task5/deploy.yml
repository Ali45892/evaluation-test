#!/bin/bash
set -e

# Configuration
APP_DIR="/opt/flask-redis-app"

# Update system packages
echo "Updating system packages..."
sudo apt-get update
sudo apt-get upgrade -y

# Install required packages
echo "Installing required packages..."
sudo apt-get install -y \
    apt-transport-https \
    ca-certificates \
    curl \
    software-properties-common \
    git

# Install Docker
echo "Installing Docker..."
if ! command -v docker &> /dev/null; then
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
    sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
    sudo apt-get update
    sudo apt-get install -y docker-ce
    sudo usermod -aG docker $USER
    echo "Docker installed successfully"
else
    echo "Docker is already installed"
fi

# Install Docker Compose
echo "Installing Docker Compose..."
if ! command -v docker-compose &> /dev/null; then
    sudo curl -L "https://github.com/docker/compose/releases/download/v2.15.1/docker-compose-linux-x86_64" -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
    echo "Docker Compose installed successfully"
else
    echo "Docker Compose is already installed"
fi

# Create app directory
echo "Creating app directory..."
sudo mkdir -p "$APP_DIR"
sudo chown $USER:$USER "$APP_DIR"

# Create application files
echo "Creating application files..."

# Create app.py
cat > "$APP_DIR/app.py" << 'EOF'
from flask import Flask
import redis
app = Flask(__name__)
redis_client = redis.Redis(host='redis', port=6379, db=0)
# Initialize Redis with "hello world" if not exists
try:
    if not redis_client.exists('message'):
        redis_client.set('message', 'hello world')
except Exception as e:
    print(f"Redis connection error: {e}")
@app.route('/')
def hello():
    try:
        message = redis_client.get('message')
        if message:
            return message.decode('utf-8')
        else:
            return "Redis key not found"
    except Exception as e:
        return f"Error: {str(e)}"
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
EOF

# Create requirements.txt
cat > "$APP_DIR/requirements.txt" << 'EOF'
flask==2.2.3
redis==4.5.1
Werkzeug==2.2.3
pytest==7.3.1
flake8==6.0.0
EOF

# Create Dockerfile
cat > "$APP_DIR/Dockerfile" << 'EOF'
FROM python:3.9-slim
WORKDIR /app
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt
COPY app.py .
EXPOSE 5000
CMD ["python", "app.py"]
EOF

# Create docker-compose.yml
cat > "$APP_DIR/docker-compose.yml" << 'EOF'
version: '3'
services:
  flask-app:
    build: .
    ports:
      - "5000:5000"
    depends_on:
      - redis
    restart: unless-stopped
    
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
volumes:
  redis-data:
EOF

# Deploy application using Docker Compose
echo "Deploying application..."
cd "$APP_DIR"

# Need to re-login to apply group changes or use sudo
if groups | grep -q docker; then
    docker-compose down || true
    docker-compose up -d
else
    sudo docker-compose down || true
    sudo docker-compose up -d
fi

# Verify deployment
echo "Verifying deployment..."
docker ps || sudo docker ps
echo "Checking application response:"
sleep 10  # Wait for the application to start
curl http://localhost:5000

echo "Deployment completed successfully!"
